stages:
  - deploy
  - build
  - webhook

build_image_dev:
  stage: build
  image:
    name: hub.ugm.id/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  tags:
    - putdev-runner
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
  before_script:
    - echo "{\"auths\":{\"${HARBOR_HOST}\":{\"auth\":\"$(printf "%s:%s" "${HARBOR_USERNAME}" "${HARBOR_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_NAME}:latest"
      --cache
      --cache-run-layers
      --cache-copy-layers

build_image_prod:
  stage: build
  image:
    name: hub.ugm.id/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  tags:
    - putdev-runner
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  before_script:
    - echo "{\"auths\":{\"${HARBOR_HOST}\":{\"auth\":\"$(printf "%s:%s" "${HARBOR_USERNAME}" "${HARBOR_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_NAME}:stable"
      --cache
      --cache-run-layers
      --cache-copy-layers

deploy-dev:
  stage: deploy
  image: hub.ugm.id/infra_dti/runner:ubuntu-jammy
  # when: manual
  tags:
    - putdev-runner
  rules:
    - if : '$CI_COMMIT_BRANCH == "develop"'
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo $HOME_DIR
    - ssh "$SSH_USER"@"$HOST" "mkdir -p $HOME_DIR"
    - rsync -a --progress --delete-before --delete-excluded --exclude '.git' --exclude '.gitignore' --exclude '.gitlab-ci.yml' --exclude 'docker-compose.*' --exclude '*.md'  --exclude 'Dockerfile' --exclude '.dockerignore' --exclude 'writable' ./ "$SSH_USER"@"$HOST":$HOME_DIR
    - ssh "$SSH_USER"@"$HOST" "find $HOME_DIR -type f -exec chmod 644 {} \;"
    - ssh "$SSH_USER"@"$HOST" "find $HOME_DIR -type d -exec chmod 755 {} \;"
    - ssh "$SSH_USER"@"$HOST" "sudo chown -R www-data:www-data $HOME_DIR"
    - ssh "$SSH_USER"@"$HOST" "[ -d "$WORK_DIR" ] || sudo mkdir -p "$WORK_DIR""
    - ssh "$SSH_USER"@"$HOST" "sudo rsync -a --progress --delete-before $HOME_DIR $WORK_DIR"
    - ssh "$SSH_USER"@"$HOST" "sudo chown -R $SSH_USER:$SSH_USER $HOME_DIR"
    - ssh "$SSH_USER"@"$HOST" "rm -vr $HOME_DIR"

deploy-prod:
  stage: deploy
  image: hub.ugm.id/infra_dti/runner:ubuntu-jammy
  # when: manual
  tags:
    - putdev-runner
  rules:
    - if : '$CI_COMMIT_BRANCH == "main"'
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo $HOME_DIR
    - ssh "$SSH_USER"@"$HOST" "mkdir -p $HOME_DIR"
    - rsync -a --progress --delete-before --delete-excluded --exclude '.git' --exclude '.gitignore' --exclude '.gitlab-ci.yml' --exclude 'docker-compose.*' --exclude '*.md'  --exclude 'Dockerfile' --exclude '.dockerignore' --exclude 'writable' ./ "$SSH_USER"@"$HOST":$HOME_DIR
    - ssh "$SSH_USER"@"$HOST" "find $HOME_DIR -type f -exec chmod 644 {} \;"
    - ssh "$SSH_USER"@"$HOST" "find $HOME_DIR -type d -exec chmod 755 {} \;"
    - ssh "$SSH_USER"@"$HOST" "sudo chown -R www-data:www-data $HOME_DIR"
    - ssh "$SSH_USER"@"$HOST" "[ -d "$WORK_DIR" ] || sudo mkdir -p "$WORK_DIR""
    - ssh "$SSH_USER"@"$HOST" "sudo rsync -a --progress --delete-before $HOME_DIR $WORK_DIR"
    - ssh "$SSH_USER"@"$HOST" "sudo chown -R $SSH_USER:$SSH_USER $HOME_DIR"
    - ssh "$SSH_USER"@"$HOST" "rm -vr $HOME_DIR"

call_portainer_dev:
  image: hub.ugm.id/proxy/alpine:3.17
  stage: webhook
  tags:
    - putdev-runner
  variables:
    PORTAINER_HOOK: $HOOK_STAGING
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      needs: ["build_image_dev"]
  script:
    - apk add --no-cache curl
    - curl -X POST $PORTAINER_HOOK

call_portainer_prod:
  image: hub.ugm.id/proxy/alpine:3.17
  stage: webhook
  tags:
    - putdev-runner
  variables:
    PORTAINER_HOOK: $HOOK_PROD
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      needs: ["build_image_prod"]
  script:
    - apk add --no-cache curl
    - curl -X POST $PORTAINER_HOOK
